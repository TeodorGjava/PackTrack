package com.mycompany.Classes;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.*;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author LL
 */
public class CommentsJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CommentsJFrame
     */
    public CommentsJFrame() throws ClassNotFoundException, SQLException {
        initComponents();
        show_comments();
    }
public ArrayList<Comments>coments() throws ClassNotFoundException, SQLException{
ArrayList<Comments> list = new ArrayList<>();
    try{
//Class.forName("com.mysql.jdbc.Driver");
//Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "admin123");
//Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            //Connection conn = DriverManager.getConnection("jdbc:derby:D:\\Projects\\coment");
               Class.forName("org.h2.Driver");
             Connection conn = DriverManager.getConnection("jdbc:h2:./database/db;IFEXISTS=TRUE","test","test");
            String query = "SELECT * FROM coments";
        Statement stm = conn.createStatement();
        ResultSet rs = stm.executeQuery(query);
        Comments coment = null;
        while(rs.next()){
        Comments comments = new Comments(rs.getString("id"),rs.getString("coment"),rs.getString("date"));
        list.add(comments);}
        }catch(Exception e){
        System.out.println(e);}
return list;}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CommentsTable = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CommentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Опаковка", "Коментар", "Дата"
            }
        ));
        jScrollPane1.setViewportView(CommentsTable);

        delete.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        delete.setText("Изтрий");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        refresh.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        refresh.setText("Обнови");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        try{
            //Class.forName("com.mysql.jdbc.Driver");
            //Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "admin123");
            //Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            //Connection conn = DriverManager.getConnection("jdbc:derby:D:\\Projects\\coment");
            Class.forName("org.h2.Driver");
             Connection conn = DriverManager.getConnection("jdbc:h2:./database/db;IFEXISTS=TRUE","test","test");
            int row = CommentsTable.getSelectedRow();
        String value = (CommentsTable.getModel().getValueAt(row, 0).toString());
        String query = "delete from coments where id ='"+value+"'";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.executeUpdate();
        DefaultTableModel model = (DefaultTableModel) CommentsTable.getModel();
        model.setRowCount(0);
        show_comments();
        JOptionPane.showMessageDialog(null, "Коментарът за "+value+" е изтрит!");
        }catch(Exception e){
            }
    }//GEN-LAST:event_deleteActionPerformed
public static void addToComents(Object[] dataRow){
DefaultTableModel model = (DefaultTableModel) CommentsTable.getModel();
model.addRow(dataRow);
}
public void refreshInfo() throws ClassNotFoundException, SQLException{
   DefaultTableModel model = (DefaultTableModel)CommentsTable.getModel();
   model.setRowCount(0);
   show_comments();

}
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        try {
            refreshInfo();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CommentsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(CommentsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshActionPerformed
public void show_comments() throws ClassNotFoundException, SQLException{
ArrayList<Comments>list1 = coments();
DefaultTableModel model = (DefaultTableModel) CommentsTable.getModel();
Object[] row = new Object[3];
    for (int i = 0; i < list1.size(); i++) {
        row[0] = list1.get(i).getId();
        row[1]= list1.get(i).getComment();
        row[2]= list1.get(i).getDate();
        model.addRow(row);
        
    }
}
    /**
     * @param args the command line arguments
     */
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable CommentsTable;
    private javax.swing.JButton delete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
